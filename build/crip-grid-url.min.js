!function(r,e){"use strict";e.gridUrl=r.module("crip.grid-url",["crip.core","crip.grid"])}(angular,window.crip||(window.crip={})),function(r,e){"use strict";function i(){function r(){return{getMappings:e}}function e(){return n}function i(r,e,i,a,o,t,c){return n={page:r||"grid-page",perPage:e||"grid-per-page",total:i||"grid-total",direction:a||"grid-direction",order:o||"grid-order",filters:t||"grid-filters",name:c||"grid-name"}}var n=i();this.getMappings=e,this.setMappings=i,this.$get=[r]}e.gridUrl.provider("cripGridUrlConfig",i),i.$inject=[]}(angular,window.crip||(window.crip={})),function(r,e){"use strict";function i(e,i,n,a){function o(e){function o(r){i.search(g.name,e.name),i.search(g.page,e.scope.grid.pagination.page),i.search(g.total,e.scope.grid.pagination.total),i.search(g.perPage,e.scope.grid.pagination.perPage),i.search(g.direction,e.scope.grid.sort.direction),i.search(g.order,e.scope.grid.sort.field),t(function(r){i.search(r,null)});for(var n in e.scope.grid.filters)e.scope.grid.filters.hasOwnProperty(n)&&i.search(n,e.scope.grid.filters[n])}function t(n){var a=i.search();r.forEach(a,function(r,i){-1===e.scope.grid.url.params.indexOf(i)&&n(i,r)})}function c(){var r={};return t(function(e,i){r[e]=i}),r}function p(r,e,n){n=n||r;var a=i.search()[r]||e[n];return a}function s(){var r=e.name,n=i.search()[g.name];return n&&n===r?!0:n?!1:(i.search(g.name,r),!0)}var g=n.getMappings();e.scope.grid.url={params:[g.page,g.perPage,g.total,g.direction,g.order,g.filters,g.name]},s()&&(e.scope.grid.pagination.page=p(g.page,e.scope.grid.pagination,"page"),e.scope.grid.pagination.total=p(g.total,e.scope.grid.pagination,"total"),e.scope.grid.pagination.perPage=p(g.perPage,e.scope.grid.pagination,"perPage"),e.scope.grid.sort.direction=p(g.direction,e.scope.grid.sort,"direction"),e.scope.grid.sort.field=p(g.order,e.scope.grid.sort,"field"),e.scope.grid.filters=c()||e.scope.grid.filters),e.scope.$on(a.dataChanged,function(r,e){s()&&i.search(g.total,e.total)}),e.scope.$on(a.filtersChanged,function(e,n){s()?(t(function(e){r.isDefined(n.filters[e])||i.search(e,null)}),r.forEach(n.filters,function(r,e){i.search(e,r)})):o(1)}),e.scope.$on(a.sortChanged,function(r,e){s()?(i.search(g.direction,e.direction),i.search(g.order,e.field)):o(2)}),e.scope.$on(a.paginationChanged,function(r,e){s()?(i.search(g.page,e.page),i.search(g.perPage,e.perPage),i.search(g.total,e.total)):o(3)}),e.scope.$watch(function(){return i.search()},function(n,o){if(s()){var t=r.equals,p=!!t(n,o),d=g.perPage,l=n[d];-1===e.scope.grid.pagination.pageSizes.indexOf(l)&&i.search(d,o[d]),p||e.scope.$broadcast(a.externallyChanged,{sort:{field:n[g.order],direction:n[g.direction]},pagination:{page:n[g.page],total:n[g.total],perPage:n[d]},filters:c(),name:n[g.name]})}});var d=r.injector();r.forEach(e.plugins,function(r,i){var n=d.get(i);n.extend({scope:e.scope,paginate:e.paginate,name:e.name,plugins:r})})}return{extend:o}}e.gridUrl.factory("cripGridUrl",i),i.$inject=["$log","$location","cripGridUrlConfig","cripGridEvents"]}(angular,window.crip||(window.crip={}));
//# sourceMappingURL=data:application/json;base64,
